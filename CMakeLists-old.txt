cmake_minimum_required(VERSION 3.28)
project(xInfer LANGUAGES CXX CUDA)

set(CMAKE_CUDA_ARCHITECTURES "75;86")
# It's often better to let CMake find the compiler, but this is okay.
set(CMAKE_CUDA_COMPILER /usr/local/cuda-12.8/bin/nvcc)

# --- ADDED: Set the C++ standard once at the top for consistency ---
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED True)


# --- This dependency finding section is unchanged ---
list(APPEND CMAKE_PREFIX_PATH  /home/kami/libs/cpp/TensorRT-10.13.2.6/)
find_path(TENSORRT_INCLUDE_DIR NvInfer.h HINTS /usr/include/x86_64-linux-gnu/)
find_library(TENSORRT_LIBRARY nvinfer HINTS /usr/lib/x86_64-linux-gnu/)
find_library(TENSORRT_PLUGIN_LIBRARY nvinfer_plugin HINTS /usr/lib/x86_64-linux-gnu/) # Renamed for clarity
find_library(TENSORRT_ONNX_PARSER_LIBRARY nvonnxparser HINTS /usr/lib/x86_64-linux-gnu/)
if (NOT TENSORRT_INCLUDE_DIR OR NOT TENSORRT_LIBRARY)
    message(FATAL_ERROR "TensorRT not found. Please set TENSORRT_ROOT or check paths.")
endif()
message(STATUS "Found TensorRT headers: ${TENSORRT_INCLUDE_DIR}")
message(STATUS "Found TensorRT library: ${TENSORRT_LIBRARY}")



find_package(xTorch REQUIRED)
if(xTorch_FOUND)
    message(STATUS "xTorch config directory found at: ${xTorch_DIR}")

    get_filename_component(XTORCH_INSTALL_DIR "${xTorch_DIR}" DIRECTORY) # up to /usr/local/lib/cmake
    get_filename_component(XTORCH_INSTALL_DIR "${XTORCH_INSTALL_DIR}" DIRECTORY) # up to /usr/local/lib
    get_filename_component(XTORCH_INSTALL_DIR "${XTORCH_INSTALL_DIR}" DIRECTORY) # up to /usr/local

    message(STATUS "Deduced xTorch installation root: ${XTORCH_INSTALL_DIR}")

    set(BUNDLED_LIBTORCH_PATH "${XTORCH_INSTALL_DIR}/include/xtorch/third_party/libtorch")

    if(EXISTS "${BUNDLED_LIBTORCH_PATH}")
        message(STATUS "Found bundled libtorch at: ${BUNDLED_LIBTORCH_PATH}")
        list(PREPEND CMAKE_PREFIX_PATH ${BUNDLED_LIBTORCH_PATH})
    else()
        message(FATAL_ERROR "Could not find the bundled libtorch directory at the expected path: ${BUNDLED_LIBTORCH_PATH}")
    endif()

    set(BUNDLED_ONNXRUNTIME_PATH "${XTORCH_INSTALL_DIR}/include/xtorch/third_party/onnxruntime")
    set(BUNDLED_ONNXRUNTIME_INCLUDE_DIR "${BUNDLED_ONNXRUNTIME_PATH}/include")
    set(BUNDLED_ONNXRUNTIME_LIB_DIR "${BUNDLED_ONNXRUNTIME_PATH}/lib")

endif()
find_package(Torch REQUIRED)
find_package(LibLZMA REQUIRED)
find_package(LibArchive REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(CURL REQUIRED)
find_package(OpenCV REQUIRED)
find_package(ZLIB REQUIRED)
find_package(SndFile REQUIRED)
#find_package(LibZip REQUIRED)

#find_package(onnxruntime REQUIRED)


#set(TEST_SOURCE_FILES ${UTILITY_FILES} ${MEDIA_FILES} ${DEFINITION_FILES} ${DATASET_FILES} ${MODEL_FILES} ${TRANSFORM_FILES})

set(TEST_LIBRARIES ${CURL_LIBRARIES}
        ${CURL_LIBRARIES}
        ${TORCH_LIBRARIES}
        ${OpenCV_LIBS}
        ${ZLIB_LIBS}
        ${ZIP_LIBRARIES}
        zip
        ${ZLIB_LIBRARIES}
        ${LIBTAR_LIBRARY}
        OpenSSL::SSL
        LibLZMA::LibLZMA
        ${LibArchive_LIBRARIES}
        ${XTORCH_LIBRARIES}
        xTorch::xTorch
        OpenSSL::SSL
        OpenSSL::Crypto
        ZLIB::ZLIB
       ${BUNDLED_ONNXRUNTIME_LIB_DIR}
        #        onnxruntime
        ONNX::Runtime
        ${LIBZIP_LIBRARIES}  # Add this line
        #        LibZip::zip

        #        LibZip::zip

)

#include_directories(SYSTEM ${CMAKE_SOURCE_DIR} /usr/include /usr/local/include ${TENSORRT_INCLUDE_DIR} ${BUNDLED_ONNXRUNTIME_INCLUDE_DIR})
#
#add_executable(xinfer main.cpp)
#target_link_libraries(xinfer PRIVATE xTorch::xTorch )
#set_property(TARGET xinfer PROPERTY CXX_STANDARD 17)
#target_include_directories(xinfer PRIVATE ${LIBTAR_INCLUDE_DIR} ${TORCH_INCLUDE_DIRS} ${LibArchive_INCLUDE_DIRS} ${XTORCH_INCLUDE_DIRS})
#



# --- ADDED: Define all source files for the xInfer library ---
# Use file(GLOB_RECURSE ...) to automatically find all .cpp and .cu files.
file(GLOB_RECURSE XINFER_SOURCES
        "src/*.cpp"
        "src/*.cu"
)

# --- ADDED: Define the xInfer library target ---
# This creates the `libxinfer.so` file.
add_library(xInfer SHARED ${XINFER_SOURCES})
# We use target_sources for headers to make them visible in IDEs like CLion
file(GLOB_RECURSE XINFER_HEADERS "include/*.h")
target_sources(xInfer PUBLIC ${XINFER_HEADERS})


# --- CHANGED: Define PUBLIC and PRIVATE dependencies for the library ---
# This ensures that any project linking against xInfer gets the necessary includes.
target_include_directories(xInfer PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>  # Path after installation
        ${TENSORRT_INCLUDE_DIR}
        ${TORCH_INCLUDE_DIRS}
        ${OpenCV_INCLUDE_DIRS}
        ${xTorch_INCLUDE_DIRS}
)

target_link_libraries(xInfer PUBLIC
        xTorch::xTorch
        ${TORCH_LIBRARIES}
        ${OpenCV_LIBS}
        ${TENSORRT_LIBRARY}
        ${TENSORRT_PLUGIN_LIBRARY}
        ${TENSORRT_ONNX_PARSER_LIBRARY}
        # --- Link other public dependencies here if their headers are used in your headers ---
)

# --- ADDED: Set properties for the library ---
set_property(TARGET xInfer PROPERTY CXX_STANDARD ${CMAKE_CXX_STANDARD})
set_property(TARGET xInfer PROPERTY CUDA_STANDARD ${CMAKE_CUDA_STANDARD})
set_property(TARGET xInfer PROPERTY POSITION_INDEPENDENT_CODE ON) # Important for SHARED libraries


# --- CHANGED: The executable is now a simple example using the library ---
# It's good practice to keep this for testing and demonstration.
add_executable(xinfer_example main.cpp)

# The example links to our new xinfer library
target_link_libraries(xinfer_example PRIVATE xiInfer)


# --- ADDED: Installation rules ---
# This is crucial for making your library findable with find_package().
include(GNUInstallDirs)
install(TARGETS xInfer
        EXPORT xinfer-targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Install all public headers
install(DIRECTORY include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Generate and install the CMake config files so others can find your library
install(EXPORT xinfer-targets
        FILE xinfer-config.cmake
        NAMESPACE xInfer::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/xinfer
)

# Generate a version file
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
        "${CMAKE_CURRENT_BINARY_DIR}/xinfer-config-version.cmake"
        VERSION ${PROJECT_VERSION}
        COMPATIBILITY AnyNewerVersion
)
install(FILES
        "${CMAKE_CURRENT_BINARY_DIR}/xinfer-config-version.cmake"
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/xinfer
)